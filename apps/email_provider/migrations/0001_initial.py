# Generated by Django 5.2.6 on 2025-09-11 07:22

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailProviderConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Friendly name for this provider', max_length=100)),
                ('provider_type', models.CharField(choices=[('sendgrid', 'SendGrid'), ('aws_ses', 'AWS SES'), ('smtp', 'SMTP')], max_length=20)),
                ('api_key', models.TextField(blank=True, help_text='API key (encrypted)', null=True)),
                ('api_secret', models.TextField(blank=True, help_text='API secret (encrypted)', null=True)),
                ('access_key', models.TextField(blank=True, help_text='AWS Access Key (encrypted)', null=True)),
                ('secret_key', models.TextField(blank=True, help_text='AWS Secret Key (encrypted)', null=True)),
                ('smtp_host', models.CharField(blank=True, max_length=255, null=True)),
                ('smtp_port', models.PositiveIntegerField(blank=True, null=True)),
                ('smtp_username', models.CharField(blank=True, max_length=255, null=True)),
                ('smtp_password', models.TextField(blank=True, help_text='SMTP password (encrypted)', null=True)),
                ('smtp_use_tls', models.BooleanField(default=True)),
                ('smtp_use_ssl', models.BooleanField(default=False)),
                ('from_email', models.EmailField(help_text='Default from email address', max_length=254)),
                ('from_name', models.CharField(blank=True, max_length=100, null=True)),
                ('reply_to', models.EmailField(blank=True, max_length=254, null=True)),
                ('daily_limit', models.PositiveIntegerField(default=1000, help_text='Daily email limit')),
                ('monthly_limit', models.PositiveIntegerField(default=30000, help_text='Monthly email limit')),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=10, help_text='Rate limit per minute')),
                ('priority', models.PositiveIntegerField(choices=[(1, 'Primary'), (2, 'Secondary'), (3, 'Tertiary')], default=1)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('health_status', models.CharField(choices=[('healthy', 'Healthy'), ('unhealthy', 'Unhealthy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('health_check_interval', models.PositiveIntegerField(default=300, help_text='Health check interval in seconds')),
                ('emails_sent_today', models.PositiveIntegerField(default=0)),
                ('emails_sent_this_month', models.PositiveIntegerField(default=0)),
                ('last_reset_date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_email_providers', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_email_providers', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_email_providers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Provider Configuration',
                'verbose_name_plural': 'Email Provider Configurations',
                'db_table': 'email_provider_configs',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailProviderHealthLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_healthy', models.BooleanField()),
                ('error_message', models.TextField(blank=True, null=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in seconds', null=True)),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_logs', to='email_provider.emailproviderconfig')),
            ],
            options={
                'verbose_name': 'Email Provider Health Log',
                'verbose_name_plural': 'Email Provider Health Logs',
                'db_table': 'email_provider_health_logs',
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailProviderTestResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_email', models.EmailField(max_length=254)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in seconds', null=True)),
                ('tested_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='email_provider.emailproviderconfig')),
                ('tested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Provider Test Result',
                'verbose_name_plural': 'Email Provider Test Results',
                'db_table': 'email_provider_test_results',
                'ordering': ['-tested_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailProviderUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('emails_sent', models.PositiveIntegerField()),
                ('success_count', models.PositiveIntegerField(default=0)),
                ('failure_count', models.PositiveIntegerField(default=0)),
                ('total_response_time', models.FloatField(default=0.0, help_text='Total response time in seconds')),
                ('logged_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='email_provider.emailproviderconfig')),
            ],
            options={
                'verbose_name': 'Email Provider Usage Log',
                'verbose_name_plural': 'Email Provider Usage Logs',
                'db_table': 'email_provider_usage_logs',
                'ordering': ['-logged_at'],
            },
        ),
    ]
