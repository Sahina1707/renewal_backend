# Generated by Django 4.2.7 on 2025-09-22 05:20

from django.db import migrations


def migrate_communication_providers_data(apps, schema_editor):
    """Migrate data from communication_providers to email_provider_configs"""
    CommunicationProvider = apps.get_model('communication_provider', 'CommunicationProvider')
    EmailProviderConfig = apps.get_model('email_provider', 'EmailProviderConfig')
    
    # Map communication provider channels to email provider types
    channel_to_provider_type = {
        'email': 'sendgrid',  # Default to sendgrid for email
        'whatsapp': 'smtp',   # Map to SMTP for non-email channels
        'sms': 'smtp',
        'call': 'smtp',
    }
    
    for comm_provider in CommunicationProvider.objects.all():
        # Only migrate email providers
        if comm_provider.channel == 'email':
            email_provider, created = EmailProviderConfig.objects.get_or_create(
                communication_provider_id=comm_provider.id,
                defaults={
                    'name': comm_provider.name,
                    'provider_type': channel_to_provider_type.get(comm_provider.channel, 'sendgrid'),
                    'from_email': 'noreply@example.com',  # Default email
                    'is_default': comm_provider.is_default,
                    'is_active': comm_provider.is_active,
                    'created_at': comm_provider.created_at,
                    'updated_at': comm_provider.updated_at,
                    'created_by_id': comm_provider.created_by_id,
                    'updated_by_id': comm_provider.updated_by_id,
                    'is_deleted': comm_provider.is_deleted,
                    'deleted_at': comm_provider.deleted_at,
                    'deleted_by_id': comm_provider.deleted_by_id,
                }
            )
            if created:
                print(f"Created EmailProviderConfig for {comm_provider.name}")


def reverse_migrate_communication_providers_data(apps, schema_editor):
    """Reverse migration - remove migrated data"""
    EmailProviderConfig = apps.get_model('email_provider', 'EmailProviderConfig')
    EmailProviderConfig.objects.filter(communication_provider_id__isnull=False).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('email_provider', '0003_add_communication_provider_mapping'),
    ]

    operations = [
        migrations.RunPython(
            migrate_communication_providers_data,
            reverse_migrate_communication_providers_data
        ),
    ]
