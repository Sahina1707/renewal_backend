# Generated by Django 4.2.7 on 2025-08-07 05:57

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('renewals', '0008_fix_renewed_status_constraint'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('payment_amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partial', 'Partial Payment'), ('overdue', 'Overdue')], default='pending', help_text='Current status of the payment', max_length=50)),
                ('payment_date', models.DateTimeField(help_text='Date and time when payment was made')),
                ('payment_mode', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('net_banking', 'Net Banking'), ('upi', 'UPI'), ('wallet', 'Digital Wallet'), ('bank_transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('cash', 'Cash'), ('emi', 'EMI'), ('auto_debit', 'Auto Debit')], help_text='Mode of payment used', max_length=50)),
                ('transaction_id', models.CharField(help_text='Unique transaction identifier', max_length=100, unique=True)),
                ('gateway_response', models.TextField(blank=True, help_text='Payment gateway response details')),
                ('reference_number', models.CharField(blank=True, help_text='Bank or gateway reference number', max_length=100)),
                ('payment_gateway', models.CharField(blank=True, help_text='Payment gateway used (Razorpay, PayU, etc.)', max_length=50)),
                ('currency', models.CharField(default='INR', help_text='Currency code (INR, USD, etc.)', max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=4, default=Decimal('1.0000'), help_text='Exchange rate if payment in foreign currency', max_digits=10)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Processing fee charged', max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount on the payment', max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount applied', max_digits=10)),
                ('net_amount', models.DecimalField(decimal_places=2, help_text='Net amount after fees and taxes', max_digits=12)),
                ('attempt_count', models.PositiveIntegerField(default=1, help_text='Number of payment attempts')),
                ('is_auto_payment', models.BooleanField(default=False, help_text='Whether this was an automatic payment')),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure')),
                ('failure_code', models.CharField(blank=True, help_text='Payment gateway failure code', max_length=50)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount refunded', max_digits=12)),
                ('refund_date', models.DateTimeField(blank=True, help_text='Date when refund was processed', null=True)),
                ('refund_reference', models.CharField(blank=True, help_text='Refund transaction reference', max_length=100)),
                ('receipt_number', models.CharField(blank=True, help_text='Receipt number for the payment', max_length=50)),
                ('receipt_url', models.URLField(blank=True, help_text='URL to download payment receipt')),
                ('due_date', models.DateField(blank=True, help_text='Payment due date', null=True)),
                ('grace_period_days', models.PositiveIntegerField(default=0, help_text='Grace period in days after due date')),
                ('payment_notes', models.TextField(blank=True, help_text='Additional notes about the payment')),
                ('customer_remarks', models.TextField(blank=True, help_text='Customer remarks or special instructions')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('renewal_case', models.ForeignKey(help_text='Renewal case this payment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='renewals.renewalcase')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'customer_payments',
                'ordering': ['-payment_date', '-created_at'],
                'indexes': [models.Index(fields=['renewal_case'], name='customer_pa_renewal_c4446f_idx'), models.Index(fields=['payment_status'], name='customer_pa_payment_c0fd7f_idx'), models.Index(fields=['payment_mode'], name='customer_pa_payment_aa3a63_idx'), models.Index(fields=['payment_date'], name='customer_pa_payment_ada2f5_idx'), models.Index(fields=['transaction_id'], name='customer_pa_transac_9ca4be_idx'), models.Index(fields=['payment_gateway'], name='customer_pa_payment_701e76_idx'), models.Index(fields=['due_date'], name='customer_pa_due_dat_9e887b_idx'), models.Index(fields=['is_auto_payment'], name='customer_pa_is_auto_d6a8bd_idx'), models.Index(fields=['currency'], name='customer_pa_currenc_20ed8d_idx'), models.Index(fields=['receipt_number'], name='customer_pa_receipt_b86470_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='customerpayment',
            constraint=models.CheckConstraint(check=models.Q(('payment_amount__gt', 0)), name='positive_payment_amount'),
        ),
        migrations.AddConstraint(
            model_name='customerpayment',
            constraint=models.CheckConstraint(check=models.Q(('net_amount__gte', 0)), name='non_negative_net_amount'),
        ),
        migrations.AddConstraint(
            model_name='customerpayment',
            constraint=models.CheckConstraint(check=models.Q(('refund_amount__gte', 0)), name='non_negative_refund_amount'),
        ),
    ]
