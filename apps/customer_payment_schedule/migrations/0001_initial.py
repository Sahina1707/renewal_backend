# Generated by Django 4.2.7 on 2025-08-07 06:09

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('renewals', '0008_fix_renewed_status_constraint'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateField(help_text='Date when payment is due')),
                ('amount_due', models.DecimalField(decimal_places=2, help_text='Amount due for this scheduled payment', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue'), ('partial', 'Partial Payment'), ('rescheduled', 'Rescheduled'), ('skipped', 'Skipped')], default='pending', help_text='Current status of the scheduled payment', max_length=100)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('net_banking', 'Net Banking'), ('upi', 'UPI'), ('wallet', 'Digital Wallet'), ('bank_transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('cash', 'Cash'), ('emi', 'EMI'), ('auto_debit', 'Auto Debit'), ('standing_instruction', 'Standing Instruction'), ('nach', 'NACH'), ('enach', 'E-NACH')], help_text='Preferred payment method for this schedule', max_length=100)),
                ('installment_number', models.PositiveIntegerField(default=1, help_text='Installment number in the payment series')),
                ('total_installments', models.PositiveIntegerField(default=1, help_text='Total number of installments planned')),
                ('description', models.TextField(blank=True, help_text='Description or notes about this payment schedule')),
                ('reminder_sent', models.BooleanField(default=False, help_text='Whether reminder has been sent for this payment')),
                ('reminder_date', models.DateField(blank=True, help_text='Date when reminder should be sent', null=True)),
                ('reminder_count', models.PositiveIntegerField(default=0, help_text='Number of reminders sent')),
                ('auto_payment_enabled', models.BooleanField(default=False, help_text='Whether auto payment is enabled for this schedule')),
                ('auto_payment_method', models.CharField(blank=True, choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('net_banking', 'Net Banking'), ('upi', 'UPI'), ('wallet', 'Digital Wallet'), ('bank_transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('cash', 'Cash'), ('emi', 'EMI'), ('auto_debit', 'Auto Debit'), ('standing_instruction', 'Standing Instruction'), ('nach', 'NACH'), ('enach', 'E-NACH')], help_text='Auto payment method if enabled', max_length=100)),
                ('payment_gateway', models.CharField(blank=True, help_text='Payment gateway to be used', max_length=50)),
                ('gateway_schedule_id', models.CharField(blank=True, help_text='Gateway-specific schedule ID', max_length=100)),
                ('grace_period_days', models.PositiveIntegerField(default=0, help_text='Grace period in days after due date')),
                ('late_fee_applicable', models.BooleanField(default=False, help_text='Whether late fee is applicable')),
                ('late_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Late fee amount if payment is overdue', max_digits=10)),
                ('late_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Late fee percentage of amount due', max_digits=5)),
                ('early_payment_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount for early payment', max_digits=10)),
                ('early_payment_days', models.PositiveIntegerField(default=0, help_text='Days before due date for early payment discount')),
                ('processed_date', models.DateTimeField(blank=True, help_text='Date and time when payment was processed', null=True)),
                ('processed_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount actually processed', max_digits=12)),
                ('transaction_reference', models.CharField(blank=True, help_text='Transaction reference from payment gateway', max_length=100)),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure')),
                ('failure_code', models.CharField(blank=True, help_text='Payment gateway failure code', max_length=50)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('max_retry_attempts', models.PositiveIntegerField(default=3, help_text='Maximum retry attempts allowed')),
                ('next_retry_date', models.DateTimeField(blank=True, help_text='Next retry attempt date', null=True)),
                ('original_due_date', models.DateField(blank=True, help_text='Original due date before rescheduling', null=True)),
                ('reschedule_reason', models.TextField(blank=True, help_text='Reason for rescheduling payment')),
                ('reschedule_count', models.PositiveIntegerField(default=0, help_text='Number of times payment has been rescheduled')),
                ('customer_notified', models.BooleanField(default=False, help_text='Whether customer has been notified about this schedule')),
                ('notification_date', models.DateTimeField(blank=True, help_text='Date when customer was notified', null=True)),
                ('customer_acknowledgment', models.BooleanField(default=False, help_text='Whether customer has acknowledged the schedule')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes for staff')),
                ('customer_notes', models.TextField(blank=True, help_text='Notes from customer')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('renewal_case', models.ForeignKey(help_text='Renewal case this payment schedule belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='payment_schedules', to='renewals.renewalcase')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment_schedule',
                'ordering': ['due_date', 'installment_number'],
                'indexes': [models.Index(fields=['renewal_case'], name='payment_sch_renewal_b5c21a_idx'), models.Index(fields=['due_date'], name='payment_sch_due_dat_82aba5_idx'), models.Index(fields=['status'], name='payment_sch_status_1b98c8_idx'), models.Index(fields=['payment_method'], name='payment_sch_payment_d9f0d1_idx'), models.Index(fields=['auto_payment_enabled'], name='payment_sch_auto_pa_67fad7_idx'), models.Index(fields=['reminder_date'], name='payment_sch_reminde_a11516_idx'), models.Index(fields=['processed_date'], name='payment_sch_process_83281d_idx'), models.Index(fields=['installment_number'], name='payment_sch_install_4be078_idx'), models.Index(fields=['payment_gateway'], name='payment_sch_payment_ae9056_idx'), models.Index(fields=['gateway_schedule_id'], name='payment_sch_gateway_e889a6_idx'), models.Index(fields=['late_fee_applicable'], name='payment_sch_late_fe_28fc9a_idx'), models.Index(fields=['next_retry_date'], name='payment_sch_next_re_37a891_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('amount_due__gt', 0)), name='positive_amount_due'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('processed_amount__gte', 0)), name='non_negative_processed_amount'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('late_fee_amount__gte', 0)), name='non_negative_late_fee_amount'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('early_payment_discount__gte', 0)), name='non_negative_early_payment_discount'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('installment_number__gte', 1)), name='positive_installment_number'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('total_installments__gte', 1)), name='positive_total_installments'),
        ),
        migrations.AddConstraint(
            model_name='paymentschedule',
            constraint=models.CheckConstraint(check=models.Q(('installment_number__lte', models.F('total_installments'))), name='installment_number_within_total'),
        ),
    ]
