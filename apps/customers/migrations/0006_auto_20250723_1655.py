# Generated by Django 4.2.7 on 2025-07-23 11:25

from django.db import migrations


def move_address_to_address_line1(apps, schema_editor):
    """Move data from address field to address_line1 field"""
    Customer = apps.get_model('customers', 'Customer')

    # Find customers that have data in address field but empty address_line1
    customers_to_update = Customer.objects.filter(
        address__isnull=False,
        address__gt='',  # Not empty string
        address_line1__in=['', None]  # Empty or null address_line1
    )

    updated_count = 0
    for customer in customers_to_update:
        if customer.address and customer.address.strip():
            customer.address_line1 = customer.address.strip()
            customer.save(update_fields=['address_line1'])
            updated_count += 1

    print(f"Moved address data to address_line1 for {updated_count} customers")


def reverse_move_address_to_address_line1(apps, schema_editor):
    """Reverse migration - move data back from address_line1 to address"""
    Customer = apps.get_model('customers', 'Customer')

    # Find customers that have data in address_line1 field but empty address
    customers_to_update = Customer.objects.filter(
        address_line1__isnull=False,
        address_line1__gt='',  # Not empty string
        address__in=['', None]  # Empty or null address
    )

    updated_count = 0
    for customer in customers_to_update:
        if customer.address_line1 and customer.address_line1.strip():
            customer.address = customer.address_line1.strip()
            customer.save(update_fields=['address'])
            updated_count += 1

    print(f"Moved address_line1 data back to address for {updated_count} customers")


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0005_remove_customer_customers_c_custome_ec5e63_idx_and_more'),
    ]

    operations = [
        migrations.RunPython(
            move_address_to_address_line1,
            reverse_move_address_to_address_line1
        ),
    ]
